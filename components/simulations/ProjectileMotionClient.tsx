// components/simulations/ProjectileMotionClient.tsx
'use client';

import { useEffect, useRef, useState } from 'react';
import p5 from 'p5';

interface SimulationResults {
  distance: number;
  time: number;
  height: number;
}

// –¢–∏–ø—ã –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
declare global {
  interface Window {
    startProjectileSimulation: () => void;
    resetProjectileSimulation: () => void;
  }
}

export default function ProjectileMotionClient() {
  const sketchRef = useRef<HTMLDivElement>(null);
  const p5Instance = useRef<p5 | null>(null);
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏
  const [velocity, setVelocity] = useState(15);
  const [angle, setAngle] = useState(45);
  const [gravity, setGravity] = useState(9.81);
  const [isRunning, setIsRunning] = useState(false);
  const [results, setResults] = useState<SimulationResults>({ distance: 0, time: 0, height: 0 });

  useEffect(() => {
    if (!sketchRef.current) return;

    const sketch = (p: p5) => {
      let time = 0;
      let trajectory: { x: number; y: number }[] = [];

      p.setup = () => {
        const canvas = p.createCanvas(600, 400);
        canvas.parent(sketchRef.current!);
        p.frameRate(60);
        resetSimulation();
      };

      p.draw = () => {
        p.background(240);
        
        // –†–∏—Å—É–µ–º –∑–µ–º–ª—é
        p.fill(139, 69, 19);
        p.rect(0, 350, p.width, 50);
        
        // –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É
        drawGrid(p);
        
        if (isRunning) {
          // –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏
          const radians = p.radians(angle);
          const v0x = velocity * p.cos(radians);
          const v0y = velocity * p.sin(radians);
          
          const x = v0x * time;
          const y = 350 - (v0y * time - 0.5 * gravity * time * time);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é
          trajectory.push({ x: x + 50, y });
          
          // –†–∏—Å—É–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é
          p.stroke(59, 130, 246, 150);
          p.strokeWeight(2);
          p.noFill();
          p.beginShape();
          trajectory.forEach(point => {
            p.vertex(point.x, point.y);
          });
          p.endShape();
          
          // –†–∏—Å—É–µ–º —Ç–µ–ª–æ
          p.fill(239, 68, 68);
          p.stroke(0);
          p.strokeWeight(1);
          p.ellipse(x + 50, y, 20, 20);
          
          // –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
          const totalTime = (2 * velocity * p.sin(radians)) / gravity;
          const maxHeight = 350 - (v0y * v0y) / (2 * gravity);
          const maxDistance = (velocity * velocity * p.sin(2 * radians)) / gravity;
          
          setResults({
            distance: Number(maxDistance.toFixed(1)),
            time: Number(totalTime.toFixed(1)),
            height: Number((350 - maxHeight).toFixed(1))
          });
          
          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–æ–≥–¥–∞ —Ç–µ–ª–æ –ø–∞–¥–∞–µ—Ç
          if (y > 350 || time > totalTime) {
            setIsRunning(false);
          }
          
          time += 0.05;
        } else {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
          p.fill(239, 68, 68);
          p.stroke(0);
          p.strokeWeight(1);
          p.ellipse(50, 350, 20, 20);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ–∫—Ç–æ—Ä –Ω–∞—á–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
          const radians = p.radians(angle);
          p.stroke(59, 130, 246);
          p.strokeWeight(3);
          p.line(50, 350, 50 + velocity * p.cos(radians), 350 - velocity * p.sin(radians));
          p.fill(59, 130, 246);
          p.triangle(
            50 + velocity * p.cos(radians), 
            350 - velocity * p.sin(radians),
            45 + velocity * p.cos(radians), 
            345 - velocity * p.sin(radians),
            45 + velocity * p.cos(radians), 
            355 - velocity * p.sin(radians)
          );
        }
      };

      const drawGrid = (p: p5) => {
        p.stroke(200);
        p.strokeWeight(1);
        
        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        for (let x = 0; x <= p.width; x += 50) {
          p.line(x, 0, x, 350);
        }
        
        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        for (let y = 0; y <= 350; y += 50) {
          p.line(0, y, p.width, y);
        }
        
        // –ü–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
        p.fill(0);
        p.textSize(12);
        p.text('x (–º)', p.width - 30, 340);
        p.text('y (–º)', 10, 15);
      };

      const resetSimulation = () => {
        time = 0;
        trajectory = [];
        setResults({ distance: 0, time: 0, height: 0 });
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
      window.startProjectileSimulation = () => {
        resetSimulation();
        setIsRunning(true);
      };

      window.resetProjectileSimulation = () => {
        resetSimulation();
        setIsRunning(false);
      };
    };

    p5Instance.current = new p5(sketch);

    return () => {
      if (p5Instance.current) {
        p5Instance.current.remove();
      }
    };
  }, [velocity, angle, gravity, isRunning]);

  const handleStart = () => {
    setIsRunning(true);
  };

  const handleReset = () => {
    setIsRunning(false);
    setResults({ distance: 0, time: 0, height: 0 });
    if (typeof window !== 'undefined' && window.resetProjectileSimulation) {
      window.resetProjectileSimulation();
    }
  };

    return (
    <div className="card p-6 max-w-4xl mx-auto">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="space-y-6">
            <div className="bg-blue-50 rounded-lg p-4">
            <h3 className="font-semibold text-blue-900 mb-3">üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞</h3>
            
            <div className="space-y-4">
                <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: <span className="text-blue-600 font-semibold">{velocity} –º/—Å</span>
                </label>
                <input
                    type="range"
                    min="5"
                    max="30"
                    step="1"
                    value={velocity}
                    onChange={(e) => setVelocity(Number(e.target.value))}
                    className="w-full h-2 bg-blue-200 rounded-lg appearance-none cursor-pointer"
                    disabled={isRunning}
                />
                <div className="flex justify-between text-xs text-gray-500 mt-1">
                    <span>5 –º/—Å</span>
                    <span>30 –º/—Å</span>
                </div>
                </div>

                <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                    –£–≥–æ–ª –±—Ä–æ—Å–∫–∞: <span className="text-green-600 font-semibold">{angle}¬∞</span>
                </label>
                <input
                    type="range"
                    min="10"
                    max="80"
                    step="5"
                    value={angle}
                    onChange={(e) => setAngle(Number(e.target.value))}
                    className="w-full h-2 bg-green-200 rounded-lg appearance-none cursor-pointer"
                    disabled={isRunning}
                />
                <div className="flex justify-between text-xs text-gray-500 mt-1">
                    <span>10¬∞</span>
                    <span>80¬∞</span>
                </div>
                </div>

                <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è: <span className="text-purple-600 font-semibold">{gravity} –º/—Å¬≤</span>
                </label>
                <input
                    type="range"
                    min="1"
                    max="20"
                    step="0.5"
                    value={gravity}
                    onChange={(e) => setGravity(Number(e.target.value))}
                    className="w-full h-2 bg-purple-200 rounded-lg appearance-none cursor-pointer"
                    disabled={isRunning}
                />
                <div className="flex justify-between text-xs text-gray-500 mt-1">
                    <span>1 –º/—Å¬≤</span>
                    <span>20 –º/—Å¬≤</span>
                </div>
                </div>
            </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
            <div className="flex space-x-3">
            <button
                onClick={handleStart}
                disabled={isRunning}
                className="btn-primary flex-1 disabled:opacity-50 disabled:cursor-not-allowed"
            >
                {isRunning ? 'üîÑ –ó–∞–ø—É—â–µ–Ω–æ...' : 'üöÄ –ó–∞–ø—É—Å–∫'}
            </button>
            <button
                onClick={handleReset}
                className="btn-outline flex-1"
            >
                üîÑ –°–±—Ä–æ—Å
            </button>
            </div>

            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
            <div className="bg-gray-50 rounded-lg p-4">
            <h3 className="font-semibold text-gray-900 mb-3">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h3>
            <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                <span className="text-gray-600">–î–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞:</span>
                <span className="font-semibold text-blue-600">{results.distance} –º</span>
                </div>
                <div className="flex justify-between">
                <span className="text-gray-600">–í—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞:</span>
                <span className="font-semibold text-green-600">{results.time} —Å</span>
                </div>
                <div className="flex justify-between">
                <span className="text-gray-600">–ú–∞–∫—Å. –≤—ã—Å–æ—Ç–∞:</span>
                <span className="font-semibold text-purple-600">{results.height} –º</span>
                </div>
            </div>
            </div>
        </div>

        {/* –ö–∞–Ω–≤–∞—Å —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π */}
        <div className="lg:col-span-2">
            <div ref={sketchRef} className="border border-gray-200 rounded-lg overflow-hidden bg-white" />
            
            {/* –õ–µ–≥–µ–Ω–¥–∞ */}
            <div className="mt-4 grid grid-cols-2 gap-4 text-sm">
            <div className="flex items-center space-x-2">
                <div className="w-4 h-4 bg-red-500 rounded-full"></div>
                <span className="text-gray-600">–¢–µ–ª–æ</span>
            </div>
            <div className="flex items-center space-x-2">
                <div className="w-4 h-1 bg-blue-500"></div>
                <span className="text-gray-600">–í–µ–∫—Ç–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏</span>
            </div>
            <div className="flex items-center space-x-2">
                <div className="w-4 h-1 bg-blue-400 opacity-60"></div>
                <span className="text-gray-600">–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è</span>
            </div>
            <div className="flex items-center space-x-2">
                <div className="w-4 h-4 bg-brown-500"></div>
                <span className="text-gray-600">–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å</span>
            </div>
            </div>
        </div>
        </div>
    </div>
    );
}